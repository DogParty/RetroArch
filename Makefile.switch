TARGET := retroarch_switch

DEBUG                  ?= 0
GRIFFIN_BUILD           = 0
WHOLE_ARCHIVE_LINK      = 0

OBJ :=

DEFINES := -DSWITCH=1 -U__linux__ -U__linux -DRARCH_INTERNAL

ifeq ($(GRIFFIN_BUILD), 1)
	OBJ += griffin/griffin.o
	DEFINES += -DHAVE_GRIFFIN=1 -DHAVE_NEON -DHAVE_MATERIALUI -DHAVE_LIBRETRODB -DHAVE_CC_RESAMPLER
	DEFINES += -DHAVE_ZLIB -DHAVE_RPNG -DHAVE_RJPEG -DHAVE_RBMP -DHAVE_RTGA -DWANT_ZLIB
	DEFINES += -DHAVE_RUNAHEAD
else
	HAVE_CC_RESAMPLER = 1
	HAVE_MENU_COMMON = 1
	HAVE_RTGA = 1
	HAVE_RPNG = 1
	HAVE_RJPEG = 1
	HAVE_RBMP = 1
	HAVE_RGUI = 1
	HAVE_ZLIB = 1
	HAVE_BUILTINZLIB = 1
	HAVE_LIBRETRODB = 1
	HAVE_ZARCH = 0
	HAVE_MATERIALUI = 0 # enable later?
	HAVE_XMB = 0
	HAVE_STATIC_VIDEO_FILTERS = 1
	HAVE_STATIC_AUDIO_FILTERS = 0
	HAVE_MENU = 1
	HAVE_RUNAHEAD = 1

	include Makefile.common
        BLACKLIST :=
	BLACKLIST += input/input_overlay.o
        BLACKLIST += tasks/task_overlay.o
	OBJ := $(filter-out $(BLACKLIST),$(OBJ))
endif


ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

INCDIRS := -I. -Ideps -Ideps/libz -Ilibretro-common/include -Ideps/stb -I/opt/devkitpro/portlibs/switch/include/SDL2/ -I/opt/devkitpro/libnx/include -I/opt/devkitpro/devkitA64/include

LIBDIRS := ./ /opt/devkitpro/portlibs/switch/libs /opt/devkitpro/libnx/lib /opt/devkitpro/devkitA64/lib

ARCH	:=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE -ftls-model=local-exec

CFLAGS	:=	-g -Wall -O2 -ffunction-sections \
			$(ARCH) $(DEFINES) \
			$(INCLUDE)  $(INCDIRS) -D__SWITCH__

CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions -std=gnu++11

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	:=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -finline -Wl,-z,multidefs -Wl,-Map,$(notdir $*.map)

LIBDIRS	+= $(PORTLIBS) $(LIBNX)

LIBS += -lSDL2 -lnx -lm -lstdc++ -lc -lretro_switch -lm

LD := aarch64-none-elf-gcc

TARGETS := $(OBJ)

TARGET		:=	$(notdir $(CURDIR))
BUILD		:=	build
SOURCES		:=	source
DATA		:=	data
INCLUDES	:=	include
EXEFS_SRC	:=	exefs_src
#ROMFS	:=	romfs

export BUILD_EXEFS_SRC := $(TOPDIR)/$(EXEFS_SRC)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(CURDIR)/$(ROMFS)
endif


export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib) -L$(CURDIR)


# all: $(TARGETS).elf

all	:	$(OUTPUT).pfs0 $(OUTPUT).nro

$(OUTPUT).pfs0	:	$(OUTPUT).nso

$(OUTPUT).nso	:	$(OUTPUT).elf

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

$(OUTPUT).elf	:	 libretro_switch.a $(OBJ)

$(TARGET).nro.so: $(OBJ) libretro_switch.a fs.squashfs.o $(LIBS)
	$(CC) $(LDFLAGS) --allow-multiple-definition -o $@ $(OBJ) libretro_switch.a fs.squashfs.o $(LDFLAGS) -lm

%.squashfs.o: %.squashfs
	$(CC) -s -r -b binary -m aarch64elf -o $@ $<

fs.squashfs: fs/*
	mksquashfs $^ $@ -comp lz4 -nopad -noappend

clean:
	rm -f $(OBJ) $(TARGET).nro.so $(TARGET).nro

.PHONY: clean all
